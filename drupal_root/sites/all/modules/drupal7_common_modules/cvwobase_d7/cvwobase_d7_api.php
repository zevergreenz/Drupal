<?php
/*
  Copyright (c) 2011-2012 Computing for Volunteer Welfare Organisations (CVWO)
  National University of Singapore
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
  files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
  modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
   
  1. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
  Software.
   
  2. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// $Id$

/**
 * @file
 * Common functions defined and used by the cvwobase_d7 module.
 */


//
// Functions which are commonly used by CVWO modules
//

/**
 * Determines the first accessible internal path
 * 
 * @param array|string $path
 *   The internal path or paths, such as "node/34".
 * 
 *   N.B. All links are assumed to be internal
 * @return string|bool
 *   The first path found to be accessible, or FALSE if none are found.
 */
function check_link_access($path) {
  // standardise type
  $paths = (array) $path;
  
  foreach ($paths as $p) {
    $router_item = menu_get_item($p == '' || $p == '<front>' ? variable_get('site_frontpage', 'node') : $p);
    if ($router_item['access'])
      return $p;
  }
  return FALSE;
}

/**
 * Outputs a link as generated by l() if it's accessible,
 * and outputs only the text if it is not.
 * @param $text
 *   The link text for the anchor tag.
 * @param array|string $path
 *   The internal path or paths being linked to, such as "node/34".
 *   After the url() function is called to construct the URL from $path and
 *   $options, the resulting URL is passed through check_plain() before it is
 *   inserted into the HTML anchor tag, to ensure well-formed HTML. See url()
 *   for more information and notes.
 * 
 *   If an array of paths is passed into this argument, the link will be to the
 *   first path that the current user has access to. If the user has no access
 *   to any of the links, only $text is returned
 * 
 *   N.B. All links are assumed to be internal, regardless of $options['external']
 * @param array $options
 *   An associative array of additional options, with the following elements:
 *   - 'attributes': An associative array of HTML attributes to apply to the
 *     anchor tag. If element 'class' is included, it must be an array; 'title'
 *     must be a string; other elements are more flexible, as they just need
 *     to work in a call to drupal_attributes($options['attributes']).
 *   - 'html' (default FALSE): Whether $text is HTML or just plain-text. For
 *     example, to make an image tag into a link, this must be set to TRUE, or
 *     you will see the escaped HTML image tag. $text is not sanitized if
 *     'html' is TRUE. The calling function must ensure that $text is already
 *     safe.
 *   - 'language': An optional language object. If the path being linked to is
 *     internal to the site, $options['language'] is used to determine whether
 *     the link is "active", or pointing to the current page (the language as
 *     well as the path must match). This element is also used by url().
 *   - Additional $options elements used by the url() function.
 * @param bool $hide_if_not_found
 *   (Optional) Set to TRUE if an empty string should be returned if none of the
 *   links are accessible. Defaults to FALSE.
 *
 * @return
 *   An HTML string containing a link to the given path.
 * 
 * @see l().
 */
function la($text, $path, array $options = array(), $hide_if_not_found = FALSE) {
  $options += array('html' => FALSE);
  
  if (($p = check_link_access($path)) !== FALSE)
    return l($text, $p, $options);
  
  return $hide_if_not_found ? '' : ($options['html'] ? $text : check_plain($text));
}

/**
 * Sends excel-compatible format as result
 *
 * Prerequisites:
 * No output has been sent yet or else header() will fail.
 *
 * @param array $header
 *  Array of Strings. Number of array elements represent number of columns
 * @param array $rows
 *  Array of rows, each row an array of items corresponding to number of columns
 * @param string $filename
 *  String for (suggested) filename
 * @param string $pre_content: the content come before the main content
 * @param string $post_content: the content come after the main content
 * @param mixed $styles An array or a string containing CSS styles to be applied
 *                      to the output.
 */
function cvwobase_download_as_excel($header, $rows, $filename = 'result.xls',
    $pre_content = '', $post_content = '', $styles = null) {

    $output = '';
    if (!empty($styles))
    {
        $output .= '<style type="text/css">' . "\n";
        if (is_array($styles))
        {
            $output .= implode("\n", $styles);
        }
        else
        {
            $output .= $styles;
        }

        $output .= '</style>' . "\n";
    }

    $output .= $pre_content;
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    $output .= $post_content;

    return cvwobase_download_as_excel_self_defined_content($output, $filename);
}


/**
 * define headers and make output excel-compatible.
 * Need this function because in some cases, the output has been generated
 * @param string $content
 *  the content of the excel file. Usually contains a table; also this is HTML compatible
 * @param string $filename
 *  the filename for the download file
 */
function cvwobase_download_as_excel_self_defined_content($content,
    $filename = 'result.xls') {
    header('Content-type: application/vnd.ms-excel; charset=UTF-8');
    header('Content-Disposition: attachment; filename="'. $filename .'"');

    $output = '<html>';
    $output .= '<head><meta http-equiv=Content-Type content="text/html; charset=utf-8"></head>';
    $output .= '<body>';
    $output .= $content;
    $output .= "</body></html>";
    print $output;

    drupal_exit();
}

/**
 * Save page data to the specified destination as a PDF and create a database file entry.
 *
 * @param string|array $content
 *   Either of:
 *   - A string of HTML content.
 *   - A renderable array of content.
 * @param string $title
 *   Translated title for the page
 * @param $destination
 *   A string containing the destination URI. This must be a stream wrapper URI.
 *   If no value is provided, a randomized name will be generated and the file
 *   will be saved using Drupal's default files scheme, usually "public://".
 * @param $replace
 *   Replace behavior when the destination file already exists:
 *   - FILE_EXISTS_REPLACE - Replace the existing file. If a managed file with
 *       the destination name exists then its database entry will be updated. If
 *       no database entry is found then a new one will be created.
 *   - FILE_EXISTS_RENAME - Append _{incrementing number} until the filename is
 *       unique.
 *   - FILE_EXISTS_ERROR - Do nothing and return FALSE.
 *
 * @return
 *   A file object, or FALSE on error.
 *
 * @see file_save_data()
 */
function make_pdf($content, $title, $destination = NULL, $replace = FILE_EXISTS_RENAME) {
  require_once drupal_get_path('module', CVWOBASE_MODULE).'/tcpdf/tcpdf.php';
  require_once drupal_get_path('module', CVWOBASE_MODULE).'/tcpdf/config/lang/eng.php';
  
  if (is_string($content))
    $content = array('main' => array('#markup' => $content));
  
  $pdf = new TCPDF();
  
  // set document information
  $pdf->SetTitle($title);
//  $pdf->SetSubject('TCPDF Tutorial');
//  $pdf->SetKeywords('TCPDF, PDF, example, test, guide');
  
  // set default header data
  $pdf->SetHeaderData('', 0, $title, '');
  
  // set header and footer fonts
  $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
  $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
  
  // set default monospaced font
  $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
  
  // set margins
  $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
  $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
  $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
//  
  //set auto page breaks
  $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
  
  //set image scale factor
  $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
  
  //set some language-dependent strings
  $pdf->setLanguageArray($l);
  
  // ---------------------------------------------------------
  
  // set font
  $pdf->SetFont('dejavusans', '', 10);
  
  // add a page
  $pdf->AddPage();
  $pdf->writeHTML(drupal_render($content));
  return file_save_data($pdf->Output('', 'S'), $destination, $replace);
}

/**
 * Handler for errors, turning them into ErrorExceptions. Enable only when necessary.
 * @code
 *  set_error_handler('exception_error_handler); // all errors, even E_NOTICE
 *  // some code that could generate errors
 *  restore_error_handler();
 * @endcode
 * @throws ErrorException
 */
function exception_error_handler($errno, $errstr, $errfile, $errline) {
   // error was suppressed with the @-operator
  if (error_reporting() === 0) {
    return false;
  }
  throw new ErrorException($errstr, $errno, 0, $errfile, $errline);
}

/**
 * Executes a command in a separate process.
 * @param string $cmd
 * @param string $cwd
 *	Defaults to the directory of THIS (cvwobase_d7_api.php) file.
 */
function cvwobase_exec($cmd, $cwd = NULL) {
	if (is_null($cwd))
		$cwd = dirname(__FILE__);
  if (substr(php_uname(), 0, 7) == "Windows"){
    $descriptorspec = array(
      0 => array('pipe', 'r'), // stdin
      1 => array('pipe', 'w'), // stdout
      2 => array('pipe', 'w') // stderr
    );
		$pipes = array();
		$fpr = proc_open(DRUPAL_ROOT.'/'.drupal_get_path('module', CVWOBASE_MODULE).'/psexec.exe /accepteula -d '.$cmd, $descriptorspec, $pipes, $cwd);
    fclose($pipes[0]);
    fclose($pipes[1]);
    $stderr = '';
    while(!feof($pipes[2])) { $stderr .= fgets($pipes[2], 128); }
    fclose($pipes[2]);
    proc_close ($fpr);
  }	
  else {
		chdir($cwd);
    exec($cmd . " > /dev/null &");  
  }
}

/**
 * Searches for the PHP binary in the system PATH variable.
 * @return mixed
 *	Full path to PHP binary, or FALSE if not found.
 */
function findPHPbinary() {
  $paths = explode(PATH_SEPARATOR, getenv('PATH'));
  foreach ($paths as $path) {
    $php_executable = $path . DIRECTORY_SEPARATOR . "php" . (isset($_SERVER["WINDIR"]) ? ".exe" : "");
    if (file_exists($php_executable) && is_file($php_executable)) {
       return $php_executable;
    }
  }
  return FALSE; // not found
}
